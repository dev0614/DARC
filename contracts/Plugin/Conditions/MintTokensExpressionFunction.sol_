// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.9;
/**
 * @title MintTokensExpressionFunctions
 * @author DARC Team
 * @notice This contract contains the functions that determine the return value of the condition node
 * related to the BATCH_MINT_TOKENS operation.
 */


import "../../MachineState.sol";
import "../../MachineStateManager.sol";
import "../../Utilities/StringUtils.sol";
import "../../Program.sol";

// import openzeppelin upgradeable contracts safe math
import "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol";

contract MintTokensExpressionFunctions is MachineStateManager {

    /**
     * @notice check if current operation is mint new token operation to any of the addresses list with the amount larger than the amount in the condition node
     * @param operation: the operation struct of the current machine state
     * @param tokenClassArray: the tokenClassArray of the current machine state
     * @param amount: the amount of the current machine state
     */
    function function__MINT_TOKEN_MORE_THAN(
        Operation memory operation,
        uint256[] memory tokenClassArray,
        uint256 amount) public pure returns (bool){
        // the parameters of this condition expression operation is:
        // params: address[] toAddressArray, uint256[] tokenClassIndexArray, uint256 amount

        // 1. if the operation is not mint new token operation, return false
        if (operation.opcode != EnumOpcode.BATCH_MINT_TOKENS) {
            return false;
        }

        // 2. traverse the mint new token operation parameters and check if the amount is larger than the amount in the condition node
        // 2.1 resore parameters from the operation struct: address[] toAddressArray (ignore), uint256[] tokenClassIndexArray, uint256[] amountArray
        uint256[] memory tokenClassIndexArrayFromOperation = operation.param.UINT256_2DARRAY[0];
        uint256[] memory amountArrayFromOperation = operation.param.UINT256_2DARRAY[1];

        // 2.2 traverse the mint new token operation parameters and calculate the total amount of the tokens to be minted
        uint256 totalAmount = 0;
        bool isOverflowFlag;
        for (uint256 i = 0; i < tokenClassIndexArrayFromOperation.length; i++) {
            for (uint256 j = 0; j < tokenClassArray.length; j++) {
                if (tokenClassIndexArrayFromOperation[i] == tokenClassArray[j]) {
                    (isOverflowFlag, totalAmount) = SafeMathUpgradeable.tryAdd(totalAmount, amountArrayFromOperation[i]);
                    if (isOverflowFlag) {
                        return true;
                    }
                    if (totalAmount > amount) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    /**
     * @notice Check if current operation is mint new token operation to any addresses with the total voting weight larger than the total voting weight in the condition node
     * @param operation the operation struct of the current machine state
     * @param totalVotingWeight the total voting weight of the current machine state
     */

    function function__MINT_TOKEN_VOTING_WEIGHT_MORE_THAN(
        bool boolIsRunningInSandbox,
        Operation memory operation,
        uint256 totalVotingWeight) public view returns (bool){
        // the parameters of this condition expression operation is:
        // params: uint256 totalVotingWeight

        // 1. if the operation is not mint new token operation, return false
        if (operation.opcode != EnumOpcode.BATCH_MINT_TOKENS) {
            return false;
        }

        // 2. traverse the mint new token operation parameters and check if the total voting weight is larger than the total voting weight in the condition node
        // 2.1 resore parameters from the operation struct
        address[] memory toAddressArrayFromOperation = operation.param.ADDRESS_2DARRAY[0];
        uint256[] memory tokenClassIndexArrayFromOperation = operation.param.UINT256_2DARRAY[0];
        uint256[] memory amountArrayFromOperation = operation.param.UINT256_2DARRAY[1];

        // 2.2 traverse the mint new token operation parameters and calculate the total voting weight of the tokens to be minted
        uint256 totalVotingWeightOfMintedTokens = 0;
        bool isOverflowFlag;
        uint256 bufferCurrentTokenTotalVotingWeight = 0;
        for (uint256 i = 0; i < toAddressArrayFromOperation.length; i++) {
            // calculate the current token total voting weight
            if (boolIsRunningInSandbox){
                (isOverflowFlag, bufferCurrentTokenTotalVotingWeight) =
                SafeMathUpgradeable.tryMul(amountArrayFromOperation[i],
                sandboxMachineState.tokenList[tokenClassIndexArrayFromOperation[i]].votingWeight );
            } else {
                (isOverflowFlag, bufferCurrentTokenTotalVotingWeight) =
                SafeMathUpgradeable.tryMul(amountArrayFromOperation[i],
                currentMachineState.tokenList[tokenClassIndexArrayFromOperation[i]].votingWeight );
            }
            if (isOverflowFlag) {
                return true;
            }
            (isOverflowFlag, totalVotingWeightOfMintedTokens) =
            SafeMathUpgradeable.tryAdd(totalVotingWeightOfMintedTokens, bufferCurrentTokenTotalVotingWeight);
            if (isOverflowFlag) {
                return true;
            }
            if (totalVotingWeightOfMintedTokens > totalVotingWeight) {
                return true;
            }
        }
        return false;
    }

    function function__MINT_TOKEN_DIVIDENDS_WEIGHT_MORE_THAN (
        bool boolIsRunningInSandbox,
        Operation memory operation,
         uint256 totalDividendWeight) public view returns (bool){
        // the parameters of this condition expression operation is:
        // params: uint256 totalDividendsWeight

        // 1. if the operation is not mint new token operation, return false
        if (operation.opcode != EnumOpcode.BATCH_MINT_TOKENS) {
            return false;
        }

        // 2. traverse the mint new token operation parameters and check if the total dividends
        // weight is larger than the total dividends weight in the condition node
        // 2.1 resore parameters from the operation struct: address[] toAddressArray, uint256[] tokenClassIndexArray, uint256[] amountArray
        address[] memory toAddressArrayFromOperation = operation.param.ADDRESS_2DARRAY[0];
        uint256[] memory tokenClassIndexArrayFromOperation = operation.param.UINT256_2DARRAY[0];
        uint256[] memory amountArrayFromOperation = operation.param.UINT256_2DARRAY[1];

        // 2.2 traverse the mint new token operation parameters and calculate the total dividends weight of the tokens to be minted
        uint256 totalDividendWeightOfMintedTokens = 0;
        bool isOverflowFlag;
        uint256 bufferCurrentTokenTotalDividendWeight = 0;
        for (uint256 i = 0; i < toAddressArrayFromOperation.length; i++) {
            // calculate the current token total dividends weight
            if (boolIsRunningInSandbox){
                (isOverflowFlag, bufferCurrentTokenTotalDividendWeight) =
                SafeMathUpgradeable.tryMul(amountArrayFromOperation[i],
                sandboxMachineState.tokenList[tokenClassIndexArrayFromOperation[i]].dividendWeight );
            } else {
                (isOverflowFlag, bufferCurrentTokenTotalDividendWeight) =
                SafeMathUpgradeable.tryMul(amountArrayFromOperation[i],
                currentMachineState.tokenList[tokenClassIndexArrayFromOperation[i]].dividendWeight );
            }
            if (isOverflowFlag) {
                return true;
            }
            (isOverflowFlag, totalDividendWeightOfMintedTokens) =
            SafeMathUpgradeable.tryAdd(totalDividendWeightOfMintedTokens, bufferCurrentTokenTotalDividendWeight);
            if (isOverflowFlag) {
                return true;
            }
            if (totalDividendWeightOfMintedTokens > totalDividendWeight) {
                return true;
            }
        }
        return false;
    }

}